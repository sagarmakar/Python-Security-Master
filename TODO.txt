TODO
====

+ Multipurpose Queue Library

+ Logging thread-safe and multiprocess/multithread aware

+ Hardened protocol library for POP3

+ Hardened protocol library for SMTP

+ Hardened protocol library for IMAP4

+ Hardened protocol library for FTP

+ Library to enable process and permission controls on OS objects

+ Library to include OWASP ESAPI specifications and security controls

+ function/class to calculate entropy of a file

+ function/class to calculate entropy of a stream

+ on-disk dictionary rotation library
(add something that generates on-disk dictionary files and takes care of
rotating them with an option for maximum size of disctionary file AND
option for maximum number of dictionary files)

+ create a decorator to check function's arguments
(check how "pysec/check.py" can be extended to add a decorator that
checks function's arguments for TYPE, LENGTH)
Example:
Check for each argument data and type base on parameters.
Need to create a decorator able to work like the following:

  @check(a = (t=int, x>=0),
         b = (t=str, 0 < len(x) < 10),
         c = (t=float, x > 0))
  def foo(a, b, c):
    ...

In the tuple the first argument checks the object against a chosen type,
and the second argument checks the object against an explicit rule like:

check(a = (t=int, x>=0) --> type has to be integer, length => zero

+ extension for logger to write info to file
(check how "pysec/log.py" should be extended to use pysec function
"pysec.io.fd.File" to allow the log to be displayed and/or saved to file)
